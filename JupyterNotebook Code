{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c7ae051",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Raneem Ali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7417b222",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run cell to import libraries \n",
    "import geopandas as gpd \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import contextily \n",
    "import mapclassify \n",
    "import folium\n",
    "import aiohttp\n",
    "import fsspec\n",
    "\n",
    "# This loads geodataframe contaning county geometry shapes\n",
    "c = \"https://github.com/babdelfa/gis/blob/main/counties_geometry.zip?raw=true\"\n",
    "import fsspec\n",
    "with fsspec.open(c) as file:\n",
    "    county_shapes = gpd.read_file(file)\n",
    "\n",
    "# This loads the most recent covid19 data from Johns Hopkins University's Github\n",
    "url_cases = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv\"\n",
    "df_cases = pd.read_csv(url_cases) \n",
    "url_deaths = \"https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv\"\n",
    "df_deaths = pd.read_csv(url_deaths) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8c3715d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Drop/Rename  \n",
    "drop = [\"UID\", \"iso2\", \"iso3\", \"code3\", \"Country_Region\",\"Lat\", \"Long_\"]\n",
    "\n",
    "df_cases.drop(columns=drop, inplace=True)\n",
    "df_deaths.drop(columns=drop, inplace=True)\n",
    "df_deaths.drop(columns=['Population'], inplace=True)\n",
    "\n",
    "rename = {\"Admin2\": \"County\", \"Province_State\" : \"state\", \"Combined_Key\" : \"county_state\", \"deaths\":\"Total Deaths\", \"cases\":\"Total Cases\"}\n",
    "\n",
    "df_cases.rename(columns=rename, inplace=True)\n",
    "df_deaths.rename(columns=rename, inplace=True)\n",
    "df_cases\n",
    "# Melt\n",
    "keep = [\"County\", \"state\", \"county_state\",\"FIPS\"]\n",
    "df_cases_melted = pd.melt(df_cases, id_vars=keep, \n",
    "                          var_name='date', \n",
    "                          value_name='Total Cases')\n",
    "df_cases_melted.tail()\n",
    "\n",
    "df_deaths_melted = pd.melt(df_deaths, id_vars=keep, \n",
    "                           var_name='date', \n",
    "                           value_name='Total Deaths')\n",
    "df_deaths_melted.tail()\n",
    "\n",
    "# Merge\n",
    "df = pd.merge(df_cases_melted, df_deaths_melted)\n",
    "df.tail()\n",
    "\n",
    "# DateTime obj\n",
    "df_cases_melted.date = pd.to_datetime(df_cases_melted['date'])\n",
    "df.date = pd.to_datetime(df_cases_melted['date'])\n",
    "\n",
    "# Group by\n",
    "\n",
    "usa_cases = df.groupby(df['date'])[\"Total Cases\"].sum()\n",
    "usa_deaths = df.groupby(df['date'])[\"Total Deaths\"].sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5c50d70",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Project code & output\n",
    "\n",
    "# Enter name\n",
    "name = input(\"Enter your name: \")\n",
    "print(\"Hello \"+name)\n",
    "\n",
    "# User info\n",
    "print(\"\\nInteractive Covid-19 Map of the US\")\n",
    "print(\"By: \"+name)\n",
    "from datetime import date\n",
    "print(\"Date:\", date.today().strftime(\"%B %d, %Y\"))\n",
    "\n",
    "# General info\n",
    "import datetime\n",
    "date= pd.to_datetime(df['date']).max().strftime(\"%m/%d/%y\")\n",
    "print(\"\\nGeneral data information:\")\n",
    "print(\"\\tTopic: COVID-19 reported cases & death\")\n",
    "print(\"\\tData source: Johns Hopkins University\")\n",
    "print(\"\\tTime period: \"+date)\n",
    "\n",
    "# USA overview\n",
    "trc = usa_cases.max()\n",
    "trd = usa_deaths.max()\n",
    "print(\"\\nUSA OVERVIEW\")\n",
    "print(\"\\t- Total reported cases: \" + f\"{trc:,}\")\n",
    "print(\"\\t- Total reported deaths: \" + f\"{trd:,}\")\n",
    "\n",
    "# State input\n",
    "print(\"\\n\\n\"+name+\", enter a state name for more COVID-19 information:\")\n",
    "user_input = input(\"Enter state: \").capitalize()\n",
    "user_state = df[df.state == user_input].copy()\n",
    "print(\"Found information for \"+ user_input+\".\")\n",
    "\n",
    "\n",
    "# State overview\n",
    "state_trc = user_state.groupby(['date'])[\"Total Cases\"].sum().max()\n",
    "state_trd = user_state.groupby(['date'])[\"Total Deaths\"].sum().max()\n",
    "print(\"\\n\\n\"+user_input.upper()+\" OVERVIEW\")\n",
    "print(\"\\t- Total reported cases: \" + f\"{state_trc:,}\")\n",
    "print(\"\\t- Total reported deaths: \" + f\"{state_trd:,}\")\n",
    "\n",
    "# Interactive map\n",
    "print(\"\\n\\nBelow is an interactive map of COVID-19 cases and deaths for \"+user_input+\" counties.\")\n",
    "\n",
    "county_shapes = county_shapes[['FIPS_BEA', 'geometry']].copy()\n",
    "\n",
    "####filter date on df here#####\n",
    "dd = df[(df[\"date\"]==pd.to_datetime(df['date']).max()) & (df.state == user_input)].copy()\n",
    "#### code below can stay as is\n",
    "gdf = pd.merge(county_shapes, dd, left_on=\"FIPS_BEA\", right_on=\"FIPS\")\n",
    "gdfs = gdf[[\"County\", \"Total Cases\", \"geometry\",\"Total Deaths\"]].copy()\n",
    "gdfs.explore('Total Deaths', cmap=\"Set2\", legend=True, scheme=\"NaturalBreaks\") # <----uncomment addressing comments below\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
